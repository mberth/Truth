//
// The covariance of two patterns can be determine through
// the use of inline types embedded within the pattern inself 
// ("Inline Covariance"). This provides a way for base types to
// guarantee that all inheriting types have data that conforms
// (or can be easily made to conform) to the patterns defined
// on the base.
// 
// Inline covariance is the "less desirable" way of establishing
// a compatibility relationship between the patterns associated
// with a type, and it's bases. Inline covariance is used when
// each valid input to a pattern associated with a type must
// *contain* a valid input to it's bases, but is not a valid input
// itself. In this case, an inline type is used to indicate the portion
// of the pattern that is transferrable to the base patterns.
// 

Numeric
Integer : Numeric
/\d+/ : Integer

SignedInteger : Integer
/(+|-)<Integer>/ : SignedInteger

Class
	A : Integer
	B : Integer

SubClass : Class
	A : SignedInteger
	B : SignedInteger

SubSubClass : SubClass
	A : +2
	B : -10
